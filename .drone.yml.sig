eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIHZhbGlkYXRlOgogICAgaW1hZ2U6IGNocmlzbnMvcGFja2VyLWFuc2libGUKICAgIGNvbW1hbmRzOgogICAgICAtIGV4cG9ydCBIT01FPS9ob21lL3BhY2tlcgogICAgICAtIHBhY2tlciB2YWxpZGF0ZSBwYWNrZXIuanNvbgoKICBpbnNwZWN0OgogICAgaW1hZ2U6IGNocmlzbnMvcGFja2VyLWFuc2libGUKICAgIGNvbW1hbmRzOgogICAgICAtIGV4cG9ydCBIT01FPS9ob21lL3BhY2tlcgogICAgICAtIHBhY2tlciBpbnNwZWN0IHBhY2tlci5qc29uCgogIGJ1aWxkOgogICAgaW1hZ2U6IGNocmlzbnMvcGFja2VyLWFuc2libGUKICAgIGNvbW1hbmRzOgogICAgICAtIGV4cG9ydCBIT01FPS9ob21lL3BhY2tlcgogICAgICAtIHBhY2tlciBidWlsZCBwYWNrZXIuanNvbgoKICBwYWNrZXItY29weS1wcm9kOgogICAgaW1hZ2U6IGNocmlzbnMvcGFja2VyLWVuY3J5cHQtY29weQogICAgY29tbWFuZHM6CiAgICAgIC0gZXhwb3J0IGZpbHRlcnM9Ii0tb3duZXIgMDkzNDAxOTgyMzg4IC0tZmlsdGVycyAiTmFtZT1uYW1lLFZhbHVlcz1kcS1vcHMtd2luKiIiCiAgICAgIC0gZXhwb3J0IGF3c19pZD0ke1BST0RfQUNDX0lEfQogICAgICAtIGV4cG9ydCBhd3Nfa2V5PSR7UFJPRF9BQ0NfS0VZfQogICAgICAtIGV4cG9ydCByZWdpb249ZXUtd2VzdC0yCiAgICAgIC0gZXhwb3J0IEhPTUU9L2hvbWUvcGFja2VyCiAgICAgIC0gY2QgL2hvbWUvcGFja2VyCiAgICAgIC0gLi9idWlsZC5zaAogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgcGFja2VyLWNvcHktbm90cHJvZDoKICAgIGltYWdlOiBjaHJpc25zL3BhY2tlci1lbmNyeXB0LWNvcHkKICAgIGNvbW1hbmRzOgogICAgICAtIGV4cG9ydCBmaWx0ZXJzPSItLW93bmVyIDA5MzQwMTk4MjM4OCAtLWZpbHRlcnMgIk5hbWU9bmFtZSxWYWx1ZXM9ZHEtb3BzLXdpbioiIgogICAgICAtIGV4cG9ydCBhd3NfaWQ9JHtOT1RQUk9EX0FDQ19JRH0KICAgICAgLSBleHBvcnQgYXdzX2tleT0ke05PVFBST0RfQUNDX0tFWX0KICAgICAgLSBleHBvcnQgcmVnaW9uPWV1LXdlc3QtMgogICAgICAtIGV4cG9ydCBIT01FPS9ob21lL3BhY2tlcgogICAgICAtIGNkIC9ob21lL3BhY2tlcgogICAgICAtIC4vYnVpbGQuc2gKICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCiAgICAgIGJyYW5jaDogbWFzdGVyCg.dtzA90FhVLDSTh30jngwBoRKGiOUj0gCyfSVuDWvXgc